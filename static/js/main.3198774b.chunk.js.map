{"version":3,"sources":["TorqueTittle.js","GameCard.js","App.js","reportWebVitals.js","index.js"],"names":["scene","camera","renderer","light","torque","mx","my","loader","OBJLoader","lastTime","performance","now","animate","currentTime","dt","requestAnimationFrame","position","x","y","Math","max","min","up","render","getThreeJSCanvas","container","a","THREE","background","clientWidth","clientHeight","setSize","loadAsync","console","log","children","material","color","roughness","metalness","rotation","PI","add","target","z","domElement","TorqueTittle","useEffect","element","document","getElementById","length","sceneDom","appendChild","fetchData","then","id","style","top","width","minHeight","transform","onMouseMove","ev","movementX","movementY","embedConfig","codeToSrc","code","parameters","Object","keys","map","k","join","GameCard","data","tittle","url","frameBorder","src","className","href","games","body","columnsCount","extraClassGamesGrid","App","g","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.3198774b.chunk.js","sourcesContent":["import * as THREE from 'three';\r\nimport {useEffect} from \"react\";\r\nimport {OBJLoader} from \"three/examples/jsm/loaders/OBJLoader\";\r\nimport {Vector3} from \"three\";\r\n\r\n\r\nlet scene;\r\nlet camera;\r\nlet renderer;\r\nlet light;\r\n\r\nlet torque;\r\n\r\nlet mx = 0;\r\nlet my = 0;\r\n\r\nlet loader = new OBJLoader();\r\n\r\n\r\nlet lastTime = performance.now()\r\n\r\n//animation\r\nfunction animate() {\r\n    let currentTime = performance.now()\r\n    let dt = (currentTime - lastTime) * 0.001;\r\n    lastTime = currentTime;\r\n\r\n    requestAnimationFrame(animate);\r\n    light.position.x += mx * dt;\r\n    light.position.y += my * dt;\r\n    light.position.x = Math.max(-20 , Math.min(light.position.x , 20))\r\n    light.position.y = Math.max(-10 , Math.min(light.position.y , 10))\r\n\r\n    torque.up = light.position;\r\n\r\n    renderer.render(scene, camera);\r\n\r\n}\r\n\r\n\r\nasync function getThreeJSCanvas(container) {\r\n    scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(\"rgb(0,0,0,00)\");\r\n\r\n    //add camera\r\n    camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        container.clientWidth / container.clientHeight\r\n    );\r\n\r\n    //renderer\r\n    renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(container.clientWidth, container.clientHeight);\r\n\r\n\r\n    // load torque logo\r\n    torque = await loader.loadAsync(\"./torquelogo.obj\")\r\n    console.log(torque)\r\n    torque.children[0].material = new THREE.MeshPhysicalMaterial({color: \"aaa\", roughness:0.2, metalness:0.7});\r\n    torque.rotation.x = Math.PI * 0.5;\r\n    scene.add(torque);\r\n\r\n    //load light\r\n\r\n    light = new THREE.DirectionalLight(\"white\", 1);\r\n    light.target = torque;\r\n    light.position.x = 10;\r\n    light.position.y = 10;\r\n    light.position.z = 20;\r\n\r\n\r\n    scene.add(light)\r\n\r\n\r\n    camera.position.z = 2;\r\n\r\n    return renderer.domElement\r\n}\r\n\r\n\r\nexport function TorqueTittle() {\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            let element = document.getElementById(\"Render\");\r\n            if (element.children.length === 0) {\r\n                let sceneDom = await getThreeJSCanvas({\r\n                    clientWidth: element.clientWidth,\r\n                    clientHeight: element.clientHeight\r\n                });\r\n                element.appendChild(sceneDom);\r\n                animate()\r\n\r\n            }\r\n        }\r\n        fetchData().then(() => {\r\n        });\r\n    })\r\n\r\n\r\n    return <div id={\"Render\"} style={{\r\n        \"background-color\" : \"black\",\r\n        top: \"10px\",\r\n        position: \"fixed\",\r\n        width: \"25%\",\r\n        minHeight: \"25%\",\r\n        transform: \"translate(150%)\"\r\n    }}\r\n                onMouseMove={(ev) => {\r\n                    mx = ev.movementX\r\n                    my = ev.movementY\r\n                }}\r\n    />;\r\n}\r\n","import \"./App.css\"\r\n\r\n\r\nconst embedConfig = {\r\n    \"link_color\": \"fafafa\",\r\n    \"border_width\": 2,\r\n    \"bg_color\": \"000000\",\r\n    \"fg_color\": \"c7c7c7\",\r\n    \"border_color\": \"ffffff\"\r\n}\r\n\r\nconst codeToSrc = code => {\r\n\r\n    const itchioHeader = \"https://itch.io/embed/\";\r\n\r\n    const parameters = Object\r\n        .keys(embedConfig)\r\n        .map(k=>`${k}=${embedConfig[k]}`)\r\n        .join(\"&\")\r\n\r\n    return `${itchioHeader}${code}?${parameters}`;\r\n};\r\n\r\nexport function GameCard({data: {code, tittle, url}}) {\r\n\r\n\r\n    return <iframe frameBorder={0} src={codeToSrc(code)} className={\"game\"}>\r\n        <a href={url}>{tittle}</a>\r\n    </iframe>\r\n\r\n}","import './App.css';\nimport {TorqueTittle} from \"./TorqueTittle\";\nimport {GameCard} from \"./GameCard\";\n\nlet games = [\n    {\n        tittle: \"Paper Protect\",\n        code: \"599923\",\n        url: \"https://torquegames.itch.io/paper-protect\"\n    },\n    {\n        tittle: \"Overkill: Magic Exterminator\",\n        code: \"284983\",\n        url: \"https://jlreymendez.itch.io/overkill-magic-exterminator\"\n    },\n    {\n        tittle: \"One Rebel Army (demo)\",\n        code: \"591464\",\n        url: \"https://torquegames.itch.io/one-rebel-army\"\n    },\n    {\n        tittle: \"Polarize\",\n        code: \"515203\",\n        url: \"https://torquegames.itch.io/polarize\"\n    },\n    {\n        tittle: \"Juan Bautista\",\n        code: \"1080327\",\n        url: \"https://a-game-by-marquitos.itch.io/juan-bautista\",\n    },\n    {\n        tittle: \"Again\",\n        code: \"775804\",\n        url: \"https://a-game-by-marquitos.itch.io/again\",\n    }\n]\n\nlet clientWidth = document.body.clientWidth;\nconsole.log(clientWidth)\nlet columnsCount = 3;\n\nif (clientWidth < 1800) {\n    columnsCount = 2;\n}\nif (clientWidth < 1200) {\n    columnsCount = 1;\n}\n\n\nlet extraClassGamesGrid = \" gta\" + columnsCount;\n\n\nfunction App() {\n    return (\n        <div className={\"appMain\"}>\n            <TorqueTittle/>\n            <div className={\"games \"+extraClassGamesGrid}>\n                {games.map(g => <GameCard data={g}/>)}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}